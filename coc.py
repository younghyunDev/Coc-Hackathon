# -*- coding: utf-8 -*-
"""COC

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WdQJmMUfXPpjvCGe83s-7hn1cm4Dy-2o
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

import matplotlib.pyplot as plt

import seaborn as sns

plt.rcParams['figure.figsize'] = [10, 6]
pd.set_option('display.max_columns', 500)
# %matplotlib inline

data=pd.read_csv('drive/My Drive/주제분석/commerce.csv',encoding='utf-8')

from google.colab import drive
drive.mount('/content/drive')

data=data[data.점포수!=0]
rfModel_wind = RandomForestClassifier()

commerce=data[['점포당매출금액','상권코드명','서비스업종코드명','월요일매출금액','화요일매출금액','수요일매출금액','목요일매출금액','금요일매출금액','주중매출금액','주말매출금액','월평균소득금액','남성상주인구수','여성상주인구수','아파트가구수','비아파트가구수','상권변화지표','남성직장인구수','여성직장인구수','월평균소득금액']]

commerce=commerce[commerce.서비스업종코드명=='일식음식점']
q1,q3=np.percentile(commerce.점포당매출금액,[25,75])
iqr=q3-q1
train=commerce[commerce.점포당매출금액<q3]
train

train=pd.get_dummies(train)
mean = train.iloc[:,1:].mean()
train.iloc[:,1:] -= mean
std = train.iloc[:,1:].std()
train.iloc[:,1:]/= std
train.dropna()
# 랜덤시드 고정시키기
np.random.seed(3)
X,Y=train.iloc[:,1:],train.iloc[:,0]

#모델1
import keras.backend as K

from keras import models
from keras import layers


def create_model():
    model=models.Sequential()
    model.add(layers.Dense(32, activation='relu',
                           input_shape=(train.iloc[:,1:].shape[1],)))
    model.add(layers.Dense(128, activation='relu'))
    model.add(Dropout(0.25))

    model.add(layers.Dense(128, activation='relu'))
    model.add(Dropout(0.25))
    model.add(layers.Dense(128, activation='relu'))
    model.add(Dropout(0.25))
    model.add(layers.Dense(64, activation='relu'))
    model.add(layers.BatchNormalization(axis=1))
    model.add(layers.Dense(1))
    optimizer = tf.train.AdamOptimizer(learning_rate=0.3)

    model.compile(optimizer=optimizer,loss='mse' ,metrics=['mae'])
    model.save('my_model.h5')
    return model


  ##label을 어떻게 설정할 것인가??

#@title 기본 제목 텍스트
# 코드 3-28 각 폴드에서 검증 점수를 로그에 저장하기
from keras.models import load_model
from keras.layers import Dropout

k=5
num_epochs = 1000
num_val_samples=int(0.3*len(train))
val= train[ :num_val_samples]
train=train[num_val_samples:]
all_mae_histories = []
print('처리중인 폴드 #')
# 검증 데이터 준비: k번째 분할
val_data = val.iloc[ :,1: ]
val_targets = val.iloc[:,0]

# 훈련 데이터 준비: 다른 분할 전
partial_train_data =  train.iloc[:,1:]
partial_train_targets = train.iloc[:,0]

# 케라스 모델 구성(컴파일 포함)
model = create_model()
# train
history = model.fit(partial_train_data, partial_train_targets,
                    validation_data=(val_data, val_targets),
                    epochs=num_epochs, batch_size=128,verbose=2)
print(history.history.keys()) 
mae_history = history.history['mean_abosolute_error']
print(np.sqrt(mae_history))
all_mae_histories.append(mae_history)
model.save('my_model.h5')

